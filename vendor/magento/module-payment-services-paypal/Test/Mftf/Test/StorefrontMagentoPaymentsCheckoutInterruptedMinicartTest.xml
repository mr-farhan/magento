<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontMagentoPaymentsCheckoutInterruptedMinicartTest">
        <annotations>
            <features value="MagentoPaymentsPayPalSmartButtonsMiniCartCheckout"/>
            <stories value="Magento Payments PayPal Checkout Interrupted from Mini Cart"/>
            <title value="Interrupted Checkout Flow from the Mini Cart"/>
            <description value="When checkout is interrupted, the product should remain in the existing cart"/>
            <severity value="CRITICAL"/>
            <testCaseId value="paypal-interrupted-checkout-minicart"/>
            <group value="magento-payments"/>
        </annotations>

        <before>
            <magentoCLI command="config:set {{EnableFreeShippingConfigData.path}} {{EnableFreeShippingConfigData.value}}" stepKey="enableFreeShipping"/>
            <!-- Login -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="login"/>
            <actionGroup ref="AdminConfigurePaymentMethodActionGroup" stepKey="configurePaymentMethod">
                <argument name="methodName" value="payment_services_paypal_smart_buttons"/>
            </actionGroup>
            <!-- Create Product -->
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <!-- Create Customer -->
            <createData entity="Simple_US_Customer" stepKey="createCustomer"/>
        </before>
        <after>
            <magentoCLI command="config:set {{DisableFreeShippingMethod.path}} {{DisableFreeShippingMethod.value}}" stepKey="disableFreeShipping"/>
            <actionGroup ref="AdminDisablePaymentMethodActionGroup" stepKey="disablePaymentMethod">
                <argument name="methodName" value="payment_services_paypal_smart_buttons"/>
            </actionGroup>
            <!-- Delete product -->
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
            <deleteData stepKey="deleteProduct" createDataKey="createProduct"/>
            <!--Delete customer -->
            <deleteData stepKey="deleteCustomer" createDataKey="createCustomer"/>
            <!-- Logout -->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdmin"/>
        </after>

        <!-- Login to storefront as previously created customer -->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="loginAsCustomer">
            <argument name="Customer" value="$$createCustomer$$"/>
        </actionGroup>

        <!-- Add product to cart from category page -->
        <amOnPage url="{{StorefrontCategoryPage.url($$createCategory.name$$)}}" after="loginAsCustomer" stepKey="navigateToCategoryPage"/>
        <actionGroup ref="StorefrontAddProductToCartFromCategoryActionGroup" after="navigateToCategoryPage" stepKey="addProductToCart">
            <argument name="productName" value="$$createProduct.name$$"/>
        </actionGroup>

        <!-- Open minicart and click PayPal button -->
        <actionGroup ref="StorefrontOpenMiniCartActionGroup" after="addProductToCart" stepKey="openMiniCart"/>
        <actionGroup ref="StorefrontClickPayPalButtonActionGroup" stepKey="clickPayPalBtn">
            <argument name="selector" value="{{SmartButtonsMiniCartSection.ButtonsIframe}}"/>
        </actionGroup>

        <!-- Login to PayPal -->
        <actionGroup ref="StorefrontLoginToPaypalAccountActionGroup" stepKey="loginToPayPal">
            <argument name="payerName" value="{{Payer.firstName}}"/>
        </actionGroup>

        <!-- Navigate away from PayPal -->
        <closeTab stepKey="closePayPalTab"/>

        <!-- Check that we are on the cart page and validate that expected product is in cart -->
        <waitForPageLoad stepKey="waitForPageToLoad"/>
        <seeInCurrentUrl url="checkout/cart" stepKey="assertOnCheckoutCartPage"/>
        <actionGroup ref="AssertStorefrontCheckoutCartItemsActionGroup" stepKey="checkProductInCart">
            <argument name="productName" value="$$createProduct.name$$"/>
            <argument name="productPrice" value="$$createProduct.price$$"/>
            <argument name="subtotal" value="$$createProduct.price$$"/>
            <argument name="qty" value="1"/>
        </actionGroup>

    </test>
</tests>
